'use client';

// auth-utils.js - Fichier utilitaire pour la gestion de l'authentification

/**
 * V√©rifie si l'utilisateur est connect√©
 * @returns {boolean} True si l'utilisateur est connect√©
 */
export function isAuthenticated() {
  if (typeof window === 'undefined') return false;
  
  const userAuth = localStorage.getItem('userAuth');
  if (!userAuth) return false;
  
  try {
    const userData = JSON.parse(userAuth);
    return !!userData.isLoggedIn;
  } catch (error) {
    console.error('Erreur lors de la v√©rification d\'authentification:', error);
    return false;
  }
}

/**
 * V√©rifie si l'utilisateur connect√© est un administrateur
 * @returns {boolean} True si l'utilisateur est un administrateur
 */
export function isAdmin() {
  if (typeof window === 'undefined') return false;

  const userAuth = localStorage.getItem('userAuth');
  if (!userAuth) return false;

  try {
    const userData = JSON.parse(userAuth);
    return userData.isLoggedIn && userData.roleId === 1; // üëà Admin = roleId 1
  } catch (error) {
    console.error('Erreur lors de la v√©rification du r√¥le admin:', error);
    return false;
  }
}


/**
 * Obtient les donn√©es de l'utilisateur connect√©
 * @returns {Object|null} Les donn√©es de l'utilisateur ou null s'il n'est pas connect√©
 */
export function getUserData() {
  if (typeof window === 'undefined') return null;
  
  const userAuth = localStorage.getItem('userAuth');
  if (!userAuth) return null;
  
  try {
    return JSON.parse(userAuth);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', error);
    return null;
  }
}

/**
 * D√©connecte l'utilisateur
 */
export function logout() {
  if (typeof window === 'undefined') return;
  
  localStorage.removeItem('userAuth');
  // Vous pourriez √©galement vouloir effacer d'autres donn√©es sp√©cifiques √† l'utilisateur
}